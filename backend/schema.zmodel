datasource db {
    provider = "sqlserver"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

plugin openapi {
    provider = "@zenstackhq/openapi"
    output = "./generated/openapi"
}

// User model
model User {
    userId            String             @id @default(uuid()) @db.VarChar(50)
    username          String             @unique @db.VarChar(50)
    email             String?            @unique @db.VarChar(100)
    fullName          String             @db.NVarChar(50)
    password          String             @db.VarChar(255)
    phone             String?            @db.VarChar(20)
    address           String?            @db.VarChar(200)
    role              String             @default("USER") @db.VarChar(10) // USER, EMPLOYEE, DOCTOR, ADMIN

    // Relations
    pets              Pet[]
    medicalRecords    MedicalRecord[]
    payments          Payment[]
    notificationUsers NotificationUser[]

    // Access control
    @@allow('create', true) // Ai cũng có thể đăng ký
    @@allow('all', auth() == this) // User có thể làm tất cả với data của mình
    @@allow('read', auth().role == "ADMIN" || auth().role == "EMPLOYEE" || auth().role == "DOCTOR")

    @@map("User")
}

// Pet model
model Pet {
    petId                String                @id @default(uuid()) @db.VarChar(50)
    name                 String                @db.NVarChar(50)
    gender               String?               @db.VarChar(10)
    species              String?               @db.NVarChar(50)
    breed                String?               @db.NVarChar(50)
    color                String?               @db.NVarChar(50)
    imageUrl             String?               @db.VarChar(255)
    identifyingMarks     String?               @db.NVarChar(500)
    ownerId              String?               @db.VarChar(50)

    // Relations
    owner                User?                 @relation(fields: [ownerId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
    appointments         Appointment[]
    serviceBookings      ServiceBooking[]
    boardingReservations BoardingReservation[]

    // Access control
    @@allow('all', owner == auth()) // Chủ pet có toàn quyền
    @@allow('read,update', auth().role == "ADMIN" || auth().role == "EMPLOYEE" || auth().role == "DOCTOR")
    @@allow('create', auth() != null) // User đã login mới tạo được pet

    @@map("Pet")
}

// Appointment model
model Appointment {
    appointmentId   String         @id @default(uuid()) @db.VarChar(50)
    petId           String         @db.VarChar(50)
    appointmentDate DateTime       @db.DateTime
    status          String         @default("PENDING") @db.VarChar(10) // PENDING, CONFIRMED, COMPLETED, CANCELLED
    symptoms        String?        @db.NVarChar(500)
    createdAt       DateTime?      @default(now()) @db.DateTime

    // Relations
    pet             Pet            @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
    medicalRecord   MedicalRecord?

    // Access control
    @@allow('all', pet.owner == auth()) // Chủ pet quản lý appointment
    @@allow('all', auth().role == "ADMIN" || auth().role == "EMPLOYEE" || auth().role == "DOCTOR")

    @@map("Appointment")
}

// Medical Record model
model MedicalRecord {
    recordId        String        @id @default(uuid()) @db.VarChar(50)
    doctorId        String        @db.VarChar(50)
    appointmentId   String?       @unique @db.VarChar(50)
    diagnosis       String?       @db.NVarChar(500)
    nextCheckupDate DateTime?     @db.Date

    // Relations
    doctor          User          @relation(fields: [doctorId], references: [userId], onUpdate: NoAction)
    appointment     Appointment?  @relation(fields: [appointmentId], references: [appointmentId], onDelete: SetNull)
    prescription    Prescription?

    // Access control
    @@allow('all', doctor == auth()) // Bác sĩ tạo có toàn quyền
    @@allow('read', appointment.pet.owner == auth()) // Chủ pet đọc được
    @@allow('all', auth().role == "ADMIN")

    @@map("MedicalRecord")
}

// Service model
model Service {
    serviceId      String          @id @default(uuid()) @db.VarChar(50)
    serviceName    String          @db.NVarChar(100)
    description    String?         @db.NVarChar(500)

    // Relations
    serviceOptions ServiceOption[]

    // Access control
    @@allow('read', true) // Tất cả đều đọc được service
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("Service")
}

// Service Option model
model ServiceOption {
    optionId        String           @id @default(uuid()) @db.VarChar(50)
    optionName      String           @db.NVarChar(100)
    price           Decimal?         @db.Decimal(10, 2)
    description     String?          @db.NVarChar(500)
    serviceId       String           @db.VarChar(50)

    // Relations
    service         Service          @relation(fields: [serviceId], references: [serviceId], onUpdate: Cascade, onDelete: Cascade)
    serviceBookings ServiceBooking[]

    // Access control
    @@allow('read', true)
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("ServiceOption")
}

// Service Booking model
model ServiceBooking {
    bookingId           String        @id @default(uuid()) @db.VarChar(50)
    petId               String        @db.VarChar(50)
    serviceOptionId     String        @db.VarChar(50)
    bookingDate         DateTime      @db.DateTime
    status              String        @default("PENDING") @db.VarChar(15) // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
    specialRequirements String?       @db.NVarChar(500)
    createdAt           DateTime?     @default(now()) @db.DateTime

    // Relations
    pet                 Pet           @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
    serviceOption       ServiceOption @relation(fields: [serviceOptionId], references: [optionId], onUpdate: Cascade, onDelete: Cascade)
    payments            Payment[]

    // Access control
    @@allow('all', pet.owner == auth())
    @@allow('all', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("ServiceBooking")
}

// Room model
model Room {
    roomId               String                @id @default(uuid()) @db.VarChar(50)
    roomNumber           Int                   @unique
    capacity             Int
    status               String                @default("AVAILABLE") @db.VarChar(20) // AVAILABLE, OCCUPIED, MAINTENANCE
    description          String?               @db.NVarChar(500)
    price                Decimal?              @db.Decimal(10, 2)

    // Relations
    boardingReservations BoardingReservation[]

    // Access control
    @@allow('read', true)
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("Room")
}

// Boarding Reservation model
model BoardingReservation {
    reservationId String    @id @default(uuid()) @db.VarChar(50)
    petId         String    @db.VarChar(50)
    roomId        String    @db.VarChar(50)
    checkInDate   DateTime  @db.Date
    checkOutDate  DateTime  @db.Date
    status        String    @default("CONFIRMED") @db.VarChar(20) // CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED
    createdAt     DateTime? @default(now()) @db.DateTime

    // Relations
    pet           Pet       @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
    room          Room      @relation(fields: [roomId], references: [roomId], onUpdate: Cascade, onDelete: Cascade)
    payments      Payment[]

    // Access control
    @@allow('all', pet.owner == auth())
    @@allow('all', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("BoardingReservation")
}

// Notification model
model Notification {
    notificationId    String             @id @default(uuid()) @db.VarChar(50)
    title             String?            @db.NVarChar(100)
    message           String?            @db.NVarChar(1000)
    type              String             @default("INFO") @db.VarChar(20) // REMINDER, ALERT, INFO
    createdAt         DateTime?          @default(now()) @db.DateTime

    // Relations
    notificationUsers NotificationUser[]

    // Access control
    @@allow('read', notificationUsers?[user == auth()])
    @@allow('create', auth().role == "ADMIN" || auth().role == "EMPLOYEE" || auth().role == "DOCTOR")

    @@map("Notification")
}

// Notification User junction table
model NotificationUser {
    notificationId String       @db.VarChar(50)
    userId         String       @db.VarChar(50)

    // Relations
    notification   Notification @relation(fields: [notificationId], references: [notificationId], onUpdate: Cascade, onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

    // Access control
    @@allow('all', user == auth())
    @@allow('create', auth().role == "ADMIN" || auth().role == "EMPLOYEE" || auth().role == "DOCTOR")

    @@id([notificationId, userId])
    @@map("Notification_User")
}

// Medicine model
model Medicine {
    medicineId         String              @id @default(uuid()) @db.VarChar(50)
    name               String              @db.NVarChar(100)
    unit               String?             @db.NVarChar(20)
    concentration      String?             @db.NVarChar(50)

    // Relations
    medicationPackages MedicationPackage[]

    // Access control
    @@allow('read', true)
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "DOCTOR")

    @@map("Medicine")
}

// Medication Package model
model MedicationPackage {
    packageId           String               @id @default(uuid()) @db.VarChar(50)
    medicineId          String               @db.VarChar(50)
    quantity            Int
    instruction         String?              @db.NVarChar(500)

    // Relations
    medicine            Medicine             @relation(fields: [medicineId], references: [medicineId], onUpdate: Cascade, onDelete: Cascade)
    prescriptionDetails PrescriptionDetail[]

    // Access control
    @@allow('read', true)
    @@allow('create,update,delete', auth().role == "ADMIN" || auth().role == "DOCTOR")

    @@map("MedicationPackage")
}

// Prescription model
model Prescription {
    prescriptionId      String               @id @default(uuid()) @db.VarChar(50)
    recordId            String               @unique @db.VarChar(50)

    // Relations
    medicalRecord       MedicalRecord        @relation(fields: [recordId], references: [recordId], onUpdate: Cascade, onDelete: Cascade)
    prescriptionDetails PrescriptionDetail[]

    // Access control
    @@allow('all', medicalRecord.doctor == auth())
    @@allow('read', medicalRecord.appointment.pet.owner == auth())
    @@allow('all', auth().role == "ADMIN")

    @@map("Prescription")
}

// Prescription Detail junction table
model PrescriptionDetail {
    prescriptionId    String            @db.VarChar(50)
    packageId         String            @db.VarChar(50)

    // Relations
    prescription      Prescription      @relation(fields: [prescriptionId], references: [prescriptionId], onUpdate: Cascade, onDelete: Cascade)
    medicationPackage MedicationPackage @relation(fields: [packageId], references: [packageId], onUpdate: Cascade, onDelete: Cascade)

    // Access control
    @@allow('all', prescription.medicalRecord.doctor == auth())
    @@allow('read', prescription.medicalRecord.appointment.pet.owner == auth())
    @@allow('all', auth().role == "ADMIN")

    @@id([prescriptionId, packageId])
    @@map("PrescriptionDetail")
}

// Payment model
model Payment {
    paymentId           String               @id @default(uuid()) @db.VarChar(50)
    userId              String               @db.VarChar(50)
    paymentDate         DateTime?            @default(now()) @db.DateTime
    totalAmount         Decimal?             @db.Decimal(10, 2)
    status              String?              @db.VarChar(20)
    roomBookId          String?              @db.VarChar(50)
    serviceBookingId    String?              @db.VarChar(50)    // Relations
    user                User                 @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
    boardingReservation BoardingReservation? @relation(fields: [roomBookId], references: [reservationId], onUpdate: NoAction, onDelete: NoAction)
    serviceBooking      ServiceBooking?      @relation(fields: [serviceBookingId], references: [bookingId], onUpdate: NoAction, onDelete: NoAction)

    // Access control
    @@allow('all', user == auth()) // User quản lý payment của mình
    @@allow('all', auth().role == "ADMIN" || auth().role == "EMPLOYEE")

    @@map("Payment")
}