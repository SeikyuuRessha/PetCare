generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  userId            String             @id() @default(uuid()) @db.VarChar(50)
  username          String             @unique() @db.VarChar(50)
  email             String?            @unique() @db.VarChar(100)
  fullName          String             @db.NVarChar(50)
  password          String             @db.VarChar(255)
  refreshToken      String?            @db.VarChar(500)
  phone             String?            @db.VarChar(20)
  address           String?            @db.VarChar(200)
  role              String             @default("USER") @db.VarChar(10) // USER, EMPLOYEE, DOCTOR, ADMIN
  pets              Pet[]
  medicalRecords    MedicalRecord[]
  payments          Payment[]
  notificationUsers NotificationUser[]

  @@map("User")
}

model Pet {
  petId                String                @id() @default(uuid()) @db.VarChar(50)
  name                 String                @db.NVarChar(50)
  gender               String?               @db.VarChar(10) // MALE, FEMALE
  species              String?               @db.NVarChar(50)
  breed                String?               @db.NVarChar(50)
  color                String?               @db.NVarChar(50)
  imageUrl             String?               @db.VarChar(255)
  identifyingMarks     String?               @db.NVarChar(500)
  ownerId              String?               @db.VarChar(50)
  owner                User?                 @relation(fields: [ownerId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  appointments         Appointment[]
  serviceBookings      ServiceBooking[]
  boardingReservations BoardingReservation[]

  @@map("Pet")
}

model Appointment {
  appointmentId   String         @id() @default(uuid()) @db.VarChar(50)
  petId           String         @db.VarChar(50)
  appointmentDate DateTime       @db.DateTime2
  status          String         @default("PENDING") @db.VarChar(10) // PENDING, CONFIRMED, COMPLETED, CANCELLED
  symptoms        String?        @db.NVarChar(500)
  createdAt       DateTime?      @default(now()) @db.DateTime
  pet             Pet            @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
  medicalRecord   MedicalRecord?

  @@map("Appointment")
}

model MedicalRecord {
  recordId        String        @id() @default(uuid()) @db.VarChar(50)
  doctorId        String        @db.VarChar(50)
  appointmentId   String?       @unique() @db.VarChar(50)
  diagnosis       String?       @db.NVarChar(500)
  nextCheckupDate DateTime?     @db.Date()
  doctor          User          @relation(fields: [doctorId], references: [userId], onUpdate: NoAction)
  appointment     Appointment?  @relation(fields: [appointmentId], references: [appointmentId], onDelete: SetNull)
  prescription    Prescription?

  @@map("MedicalRecord")
}

model Service {
  serviceId      String          @id() @default(uuid()) @db.VarChar(50)
  serviceName    String          @db.NVarChar(100)
  description    String?         @db.NVarChar(500)
  serviceOptions ServiceOption[]

  @@map("Service")
}

model ServiceOption {
  optionId        String           @id() @default(uuid()) @db.VarChar(50)
  optionName      String           @db.NVarChar(100)
  price           Decimal?         @db.Decimal(10, 2)
  description     String?          @db.NVarChar(500)
  serviceId       String           @db.VarChar(50)
  service         Service          @relation(fields: [serviceId], references: [serviceId], onUpdate: Cascade, onDelete: Cascade)
  serviceBookings ServiceBooking[]

  @@map("ServiceOption")
}

model ServiceBooking {
  bookingId           String        @id() @default(uuid()) @db.VarChar(50)
  petId               String        @db.VarChar(50)
  serviceOptionId     String        @db.VarChar(50)
  bookingDate         DateTime      @db.DateTime2
  status              String        @default("PENDING") @db.VarChar(15) // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  specialRequirements String?       @db.NVarChar(500)
  createdAt           DateTime?     @default(now()) @db.DateTime2
  pet                 Pet           @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
  serviceOption       ServiceOption @relation(fields: [serviceOptionId], references: [optionId], onUpdate: Cascade, onDelete: Cascade)
  payments            Payment[]

  @@map("ServiceBooking")
}

model Room {
  roomId               String                @id() @default(uuid()) @db.VarChar(50)
  roomNumber           Int                   @unique()
  capacity             Int
  status               String                @default("AVAILABLE") @db.VarChar(15) // AVAILABLE, OCCUPIED, MAINTENANCE
  description          String?               @db.NVarChar(500)
  price                Decimal?              @db.Decimal(10, 2)
  boardingReservations BoardingReservation[]

  @@map("Room")
}

model BoardingReservation {
  reservationId String    @id() @default(uuid()) @db.VarChar(50)
  petId         String    @db.VarChar(50)
  roomId        String    @db.VarChar(50)
  checkInDate   DateTime  @db.Date()
  checkOutDate  DateTime  @db.Date()
  status        String    @default("CONFIRMED") @db.VarChar(15) // CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED
  createdAt     DateTime? @default(now()) @db.DateTime
  pet           Pet       @relation(fields: [petId], references: [petId], onUpdate: Cascade, onDelete: Cascade)
  room          Room      @relation(fields: [roomId], references: [roomId], onUpdate: Cascade, onDelete: Cascade)
  payments      Payment[]

  @@map("BoardingReservation")
}

model Notification {
  notificationId    String             @id() @default(uuid()) @db.VarChar(50)
  title             String?            @db.NVarChar(100)
  message           String?            @db.NVarChar(1000)
  type              String             @default("INFO") @db.VarChar(10) // REMINDER, ALERT, INFO
  createdAt         DateTime?          @default(now()) @db.DateTime2
  notificationUsers NotificationUser[]

  @@map("Notification")
}

model NotificationUser {
  notificationId String       @db.VarChar(50)
  userId         String       @db.VarChar(50)
  notification   Notification @relation(fields: [notificationId], references: [notificationId], onUpdate: Cascade, onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)

  @@id([notificationId, userId])
  @@map("Notification_User")
}

model Medicine {
  medicineId         String              @id() @default(uuid()) @db.VarChar(50)
  name               String              @db.NVarChar(100)
  unit               String?             @db.NVarChar(20)
  concentration      String?             @db.NVarChar(50)
  medicationPackages MedicationPackage[]

  @@map("Medicine")
}

model MedicationPackage {
  packageId           String               @id() @default(uuid()) @db.VarChar(50)
  medicineId          String               @db.VarChar(50)
  quantity            Int
  instruction         String?              @db.NVarChar(500)
  medicine            Medicine             @relation(fields: [medicineId], references: [medicineId], onUpdate: Cascade, onDelete: Cascade)
  prescriptionDetails PrescriptionDetail[]

  @@map("MedicationPackage")
}

model Prescription {
  prescriptionId      String               @id() @default(uuid()) @db.VarChar(50)
  recordId            String               @unique() @db.VarChar(50)
  medicalRecord       MedicalRecord        @relation(fields: [recordId], references: [recordId], onUpdate: Cascade, onDelete: Cascade)
  prescriptionDetails PrescriptionDetail[]

  @@map("Prescription")
}

model PrescriptionDetail {
  prescriptionId    String            @db.VarChar(50)
  packageId         String            @db.VarChar(50)
  prescription      Prescription      @relation(fields: [prescriptionId], references: [prescriptionId], onUpdate: Cascade, onDelete: Cascade)
  medicationPackage MedicationPackage @relation(fields: [packageId], references: [packageId], onUpdate: Cascade, onDelete: Cascade)

  @@id([prescriptionId, packageId])
  @@map("PrescriptionDetail")
}

model Payment {
  paymentId           String               @id() @default(uuid()) @db.VarChar(50)
  userId              String               @db.VarChar(50)
  paymentDate         DateTime?            @default(now()) @db.DateTime2
  totalAmount         Decimal?             @db.Decimal(10, 2)
  status              String?              @db.VarChar(20) // PENDING, COMPLETED, FAILED, CANCELLED
  roomBookId          String?              @db.VarChar(50)
  serviceBookingId    String?              @db.VarChar(50)
  user                User                 @relation(fields: [userId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  boardingReservation BoardingReservation? @relation(fields: [roomBookId], references: [reservationId], onUpdate: NoAction, onDelete: NoAction)
  serviceBooking      ServiceBooking?      @relation(fields: [serviceBookingId], references: [bookingId], onUpdate: NoAction, onDelete: NoAction)

  @@map("Payment")
}